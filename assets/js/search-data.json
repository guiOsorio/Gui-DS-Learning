{
  
    
        "post0": {
            "title": "Linear Algebra",
            "content": "Principal Component Analysis (PCA for short), is a technique used to reduce the dimensionality of data. Let&#39;s say we have a dataset of dimension 100x250 (100 rows, 250 columns), and we want to use that to train a machine learning model. Using all of this dataset&#39;s features is impractical and inneficient. . To overcome this, we can use PCA, which will reduce the dimensionality of our data and facilitate building our ML model. . PCA from scratch . Let&#39;s go through the Principal Component Analysis algorithm step-by-step using only NumPy. . import numpy as np . . First, let&#39;s define a 3x2 matrix M . M = np.array([[1,2], [3,4], [5,6]]) M . array([[1, 2], [3, 4], [5, 6]]) . Our first step is to calculate the mean values across each column. . col_means = np.mean(M, axis=0) # in the axis parameter, we can specify in which direction to calculate the means: 0 for columns, 1 for rows col_means . array([3., 4.]) . Next, we need to center the column values by subtracting the respective mean. . centered_M = M - col_means centered_M . array([[-2., -2.], [ 0., 0.], [ 2., 2.]]) . Once we have the centered matrix, we can calculate the covariance matrix of its transpose. . A covariance matrix gives us the correlation scores between columns in a matrix. . covar = np.cov(centered_M.T) covar . array([[4., 4.], [4., 4.]]) . Next, we need to calculate the eigendecomposition of this covariance matrix, and store the resulting eigenvectors and eigenvalues. . Eigenvectors represent the directions for the reduced matrix, whereas the eigenvalues represent the magnitudes of these directions. . Eigenvalues close to 0 represent components which are not relevant. When performing PCA, we need to choose the top k eigenvalues to keep, which will represent the most relevant components of the features (called principals). . eig_vals, eig_vecs = np.linalg.eig(covar) print(eig_vals) # eigenvalues close to 0 represent components which are not relevant print(&#39;--&#39;) print(eig_vecs) . [8. 0.] -- [[ 0.70710678 -0.70710678] [ 0.70710678 0.70710678]] . Finally, it&#39;s time to project our transformed data. This will correspond to dt product of the transpose of our eigenvectors and the transpose of the centered matrix calculated earlier. . transformed_M = eig_vecs.T.dot(centered_M.T).T transformed_M . array([[-2.82842712, 0. ], [ 0. , 0. ], [ 2.82842712, 0. ]]) . This result indicates that we can transform our original 3x2 matrix into a 3x1 matrix with minimal loss (this could have already been concluded after noticing an eigenvalue of 0). . PCA with scikit-learn . Now, let&#39;s make things easy and use scikit-learn to help in the process. . from sklearn.decomposition import PCA . . We can easily achieve the same results with fewer lines of code using scikit-learn! . First, let&#39;s initialize a PCA class and fit it into our matrix. . pca = PCA(2) # Fit pca.fit(M) . PCA(n_components=2) . In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.PCAPCA(n_components=2) . After fitting the model, we have access to all of the values calculated in the NumPy approach. . print(&#39;EIGENVALUES&#39;) print(pca.explained_variance_) print(&#39;--&#39;) # Eigenvectors print(&#39;EIGENVECTORS&#39;) print(pca.components_) print(&#39;--&#39;) # Transformed data transformed_M2 = pca.transform(M) print(&#39;TRANSFORMED MATRIX&#39;) print(transformed_M2) . EIGENVALUES [8.00000000e+00 2.25080839e-33] -- EIGENVECTORS [[ 0.70710678 0.70710678] [ 0.70710678 -0.70710678]] -- TRANSFORMED MATRIX [[-2.82842712e+00 2.22044605e-16] [ 0.00000000e+00 0.00000000e+00] [ 2.82842712e+00 -2.22044605e-16]] . You have now been introduced to a valuable dimensionality reduction technique, the Principal Component Analysis! .",
            "url": "https://guiosorio.github.io/Gui-DS-Learning/2022/07/13/PCA.html",
            "relUrl": "/2022/07/13/PCA.html",
            "date": " • Jul 13, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Machine Learning",
            "content": "Post with the goal of giving an overview on how to train a neural network. . Before proceeding, we need to create a training set. . import fastbook fastbook.setup_book() from fastai.vision.all import * from fastbook import * import numpy as np import matplotlib.pyplot as plt import torch matplotlib.rc(&#39;image&#39;, cmap=&#39;Greys&#39;) . . # Define values for time variable (x) time = torch.arange(0,20).float() # Define values for speed variable (y/target) - value we are trying to predict speed = torch.randn(20)*3 + 0.75*(time-9.5)**2 + 1 plt.scatter(time,speed) . &lt;matplotlib.collections.PathCollection at 0x2b7714f47c0&gt; . This step creates a quadratic function of a feature time (x) against a target speed (y). . Step 1 - Initialize parameters . params = torch.randn(3).requires_grad_() orig_params = params.clone() params . tensor([-0.7658, -0.7506, 1.3525], requires_grad=True) . The step above initializes 3 random parameters and defines a tensor &#39;params&#39; to store them. . The requiresgrad() method is required to allow for the calculation of the gradient of the function, so we can update the parameters later on. . Step 2 - Calculate predictions . def f(t, params): a,b,c = params return a*(t**2) + (b*t) + c # Calculate predictions preds = f(time, params) # Visualize predictions def show_preds(preds, ax=None): if ax is None: ax=plt.subplots()[1] ax.scatter(time, speed) ax.scatter(time, to_np(preds), color=&#39;red&#39;) show_preds(preds) . After initializing our weights, we define a function f which will try to predict our target based on our params. . This function is very innacurate yet, but don&#39;t worry, the process we will go through will train our parameters to match our targets through this function! . Step 3 - Calculate loss . def mse(preds, targets): return ((preds-targets)**2).mean() # Calculate loss based on predictions made earlier loss = mse(preds, speed) loss . tensor(25823.8086, grad_fn=&lt;MeanBackward0&gt;) . A loss is a metric used to tell our model how close our predictions are from our targets, so it can later update our parameters to be closer to them. (through the calculation of gradients, which we will see above) . Step 4 - Calculate gradients . loss.backward() params.grad . tensor([-53195.8594, -3419.7148, -253.8908]) . The gradients represent the degree to which our loss function will change given a change in a parameter. This value represents the derivative of our parameters in relation to the loss function. Since we want to minimize our loss function, we can predict in which direction to move our parameters in order to achieve this goal. . Step 5 - Step (update parameters) . lr = 1e-5 # Update params based on lr and gradient params.data -= lr * params.grad.data # Reset gradients params.grad = None . To update our parameters, we need to set a learning rate. The learning rate can&#39;t be too small, as it would require more training since the parameters would be optimized very slowly. It also cannot be too large, as we risk missing out on the optimal value for our parameters, or needing unnecessary training epochs. . Put it all together - train model . def train_epoch(p, i=None, prn=True): # Option to print loss preds = f(time, p) # Predictions loss = mse(preds, speed) # Loss loss.backward() # Gradients p.data -= lr * p.grad.data # Step p.grad = None if prn and i &gt;= 0: print(f&#39;Loss after epoch {i+1}: &#39;, loss.item()) elif prn: print(loss.item()) return preds for i in range(10): train_epoch(params, i=i) . Loss after epoch 1: 5435.53662109375 Loss after epoch 2: 1577.4495849609375 Loss after epoch 3: 847.3780517578125 Loss after epoch 4: 709.2225952148438 Loss after epoch 5: 683.0757446289062 Loss after epoch 6: 678.1244506835938 Loss after epoch 7: 677.1839599609375 Loss after epoch 8: 677.0025024414062 Loss after epoch 9: 676.9644165039062 Loss after epoch 10: 676.9537353515625 . As we can see, our loss is decreasing after each epoch: our model is working!! . OBS: although after 10 epochs our loss has always decreased, there is a risk of the loss actually increasing instead. This is called overfitting and is a huge challenge in training ML models in general today. . _,axs = plt.subplots(1,4,figsize=(12,3)) for ax in axs: show_preds(train_epoch(params, prn=False), ax) plt.tight_layout() . Above is the visual representation of the training of our 4 epochs. . Congratulations! You now know the basic steps of training a neural network!! .",
            "url": "https://guiosorio.github.io/Gui-DS-Learning/2022/07/11/Epoch-Basics.html",
            "relUrl": "/2022/07/11/Epoch-Basics.html",
            "date": " • Jul 11, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Linear Algebra",
            "content": "Vector Norm/Magnitude . Vector norm refers to calculating a vector&#39;s length. In practice, higher coefficients lead to less accurate models, therefore vector norm calculation is useful in ML, as it can be used in techniques to calibrate ML models -&gt; minimizing the loss and preventing overfitting and underfitting. As the distance between two vectors is a single vector, claculating the resulting vector&#39;s norm can also be used as a loss function of a ML model. . Common methods to calculate a vector&#39;s norm are: . L1 norm | L2 norm (root mean squared error) | Max norm | . L1 norm . Refers to the sum of absolute values in a vector. Summarizes the distance from the vector to its origin in space. . Single vector . import numpy as np import torch import torch.nn.functional as F . . # Define a vector v = np.array([1,2,3]) # Calculate L1 from scrach def calc_l1norm(vec): return float(abs(vec.sum())) print(&#39;From scratch: &#39;, calc_l1norm(v)) # Calculate L1 norm using NumPy print(&#39;Using NumPy.linalg: &#39;, np.linalg.norm(v, 1)) . From scratch: 6.0 Using NumPy.linalg: 6.0 . In the case above, the L1 norm can be calculated with the simple addition: 1 + 2 + 3 = 6 . Two vectors . # Define 2 tensors t1 = torch.tensor([1.,2.,3.]) t2 = torch.tensor([4.,5.,6.]) # Calculate L1 norm from scratch def calc_l1norm2(tensor1, tensor2): return (tensor1-tensor2).abs().mean() print(&#39;From scratch: &#39;, calc_l1norm2(t1,t2)) # Calculate L1 norm using PyTorch print(&#39;Using PyTorch: &#39;, F.l1_loss(t1, t2)) . From scratch: tensor(3.) Using PyTorch: tensor(3.) . Subtract tensors -&gt; t1 - t2 = [-3.,-3.,-3.] | Convert to absolute values -&gt; [3.,3.,3.]. | The L1 norm of this vector can then be calculated as taking the mean of these values -&gt; (3+3+3)/3 = 3 | L2 norm . Refers to the root mean squared error of the values in a vector. . Single vector . # Define a vector v = np.array([1.,2.,3.]) # Calculate L2 from scratch def calc_l2norm(vec): return np.sqrt(((vec)**2).sum()) print(&#39;From scratch: &#39;, calc_l2norm(v)) # Calculate L2 norm using NumPy print(&#39;Using NumPy.linalg: &#39;, np.linalg.norm(v, 2)) . From scratch: 3.7416573867739413 Using NumPy.linalg: 3.7416573867739413 . The vector is transformed into its squared version [12, 22, 3**3] -&gt; [1,4,9]. | The squared vector is summed up 1 + 4 + 9 -&gt; 14 | The L2 is equal to the square root of the scalar sqrt(14) -&gt; 3.742 | Two vectors . # Define 2 tensors t1 = torch.tensor([1.,2.,3.]) t2 = torch.tensor([4.,5.,6.]) # Calculate L2 norm from scratch def calc_l2norm2(tensor1, tensor2): return ((tensor1-tensor2)**2).mean().sqrt() print(&#39;From scratch: &#39;, calc_l2norm2(t1, t2)) # Calculate L2 norm using PyTorch print(&#39;Using PyTorch: &#39;, F.mse_loss(t1, t2).sqrt()) . From scratch: tensor(3.) Using PyTorch: tensor(3.) . Subtract tensors -&gt; [1-4,2-5,3-6] -&gt; [-3,-3,-3] | Square the subtracted tensor -&gt; [-32,-32,-3**2] -&gt; [9,9,9] | Calculate the mean as a scalar -&gt; (9+9+9)/3 = 9 | Calculate the square root of the scalar -&gt; sqrt(9) = 3 | Max norm . Returns the maximum absolute value of the vector. . Single vector . # Define vector v = np.array([1,2,3]) # Calculate max norm from scratch def calc_maxnorm(vec): return max(abs(vec)) print(&#39;From scratch: &#39;, calc_maxnorm(v)) # Calculate max norm using NumPy.linalg print(&#39;Using NumPy: &#39;, np.linalg.norm(v, np.inf)) . From scratch: 3 Using NumPy: 3.0 . Matrix Multiplication . Matrix multiplication is not so straight-forward as you may think. Below, I will explain the dot product between matrixes. The conventional multiplication you may be thinking of, when referred to vectors, is called the Hadamard multiplication. . Matrix-Matrix . Let&#39;s say we have two matrixes, M1 and M2. Their dimensions (rows, columns) are (m,n) for M1 and (n,k) for M2. For them to be multiplied, a simple requirement needs to be satisfied: n must be equal, that is, the number of columns in M1 needs to be equal to the number of rows in M2. The resulting matrix will be of dimensions (m,k), that is, the number of rows of M1, and the number of columns of M2. . Let&#39;s represent this by multiplying a 2x3 matrix with a 3x2 matrix. . M1 = np.array([[1,2,3], [4,5,6]]) # 2x3 matrix M2 = np.array([[1,2], [3,4], [5,6]]) # 3x2 matrix print(M1) print(&#39;&#39;) print(M2) M1 @ M2 . [[1 2 3] [4 5 6]] [[1 2] [3 4] [5 6]] . array([[22, 28], [49, 64]]) . As noted above, the resulting matrix has dimensions (2,2). . Position [0,0] = M1[0,0] M2[0,0] + M1[0,1] M2[1,0] + M1[0,2] M2[2,0] = 1 1 + 2 3 + 3 5 = 22 | Position [0,1] = M1[0,0] M2[0,1] + M1[0,1] M2[1,1] + M1[0,2] M2[2,1] = 1 2 + 2 4 + 3 6 = 28 | Position [1,0] = M1[1,0] M2[0,0] + M1[1,1] M2[1,0] + M1[1,2] M2[2,0] = 4 1 + 5 3 + 6 5 = 49 | Position [1,1] = M1[1,0] M2[0,1] + M1[1,1] M2[1,1] + M1[1,2] M2[2,1] = 4 2 + 5 4 + 6 6 = 64 | Resulting in the 2x2 matrix [ [22,28], [49,64] ] | . Matrix-Vector . For a matrix-vector multiplication to work, the number of values in the vector needs to equal n, the number of columns in the matrix. Multiplying a matrix of dimensions (m, n) with a vector of k values results in a vector with m values (number of rows in matrix). . v = np.array([1,2,3]) print(v) print(&#39;&#39;) print(M1) M1 @ v . [1 2 3] [[1 2 3] [4 5 6]] . array([14, 32]) . Position [0,0] = M1[0,0] v[0] + M1[0,1] v[1] + M1[0,2] v[2] = 1 1 + 2 2 + 3 3 = 14 | Position [0,1] = M1[1,0] v[0] + M1[1,1] v[1] + M1[1,2] v[2] = 4 1 + 5 2 + 6 3 = 32 | Resulting in a vector with 2 values [14, 32] | .",
            "url": "https://guiosorio.github.io/Gui-DS-Learning/2022/07/10/LinAlg1.html",
            "relUrl": "/2022/07/10/LinAlg1.html",
            "date": " • Jul 10, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "My First Post",
            "content": "Welcome . Hello everyone! Welcome to my blog. I hope to answers some basic questions with this post. . Blog-Related Questions . Who am I and what is my experience? . The creation of this blog comes around 3 years deep into my programming journey, and 1 year into my Data Science journey. During this time, I have learned about web development (front-end and back-end), data structures &amp; algorithms, data visualization, data analysis, and more. You get exposed to such a wide range of fascinating topics when learning how to code, and the possibilities are thrilling!! After thinking about pursuing a career in software engineering, I got exposed to the area of Data Science, and have worked to master this topic. . Why am I creating this blog? . What&#39;s the reason behing this blog? Above all, this blog intends to be a way for me to reflect on my learning, and explain some concepts that I study. Teaching is the best form of learning, so this will serve as a good way for me to both learn and be able to revise on concepts I learn throughout time. . What content do I expect to post? . As I am working to become a data scientist, expect this blog to be centered around this area. There are a vast array of topics you can expect me to talk about here, these include: . Collecting data | Visualizing data | Exploratory data analysis | Statistics concepts | Anything related to machine learning (from linear algebra to building a full neural network model) | . I hope you enjoy my blog! . Gui .",
            "url": "https://guiosorio.github.io/Gui-DS-Learning/2022/07/10/First-Post.html",
            "relUrl": "/2022/07/10/First-Post.html",
            "date": " • Jul 10, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Book Shelf",
            "content": "Quick post to keep track of the books I read relating to Data Science by topic. . Statistics . &#39;Naked Statistics: Stripping the Dread from the Data&#39; by Charles Wheelan | &#39;Statistical Inference&#39; by George Casella &amp; Roger Berger | . Data Visualization . &#39;Storytelling with Data: A Data Visualization Guide for Business Professionals&#39; by Cole Nussbaumer Knaflic | . Machine Learning . &#39;Machine Learning Simplified: A Gentle Introduction to Supervised Learning&#39; by Andrew Wolf | &#39;Linear Algebra for Machine Learning&#39; by Jason Brownlee | &#39;The Elements of Statistical Learning&#39; by Trevor Hastie &amp; Robert Tibshirani &amp; Jerome Friedman | &#39;Deep Learning for Coders with fastai &amp; PyTorch: AI Applications Without a PhD&#39; by Jeremy Howard &amp; Sylvain Gugger | . More to come!! . Gui .",
            "url": "https://guiosorio.github.io/Gui-DS-Learning/2022/07/10/Books.html",
            "relUrl": "/2022/07/10/Books.html",
            "date": " • Jul 10, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://guiosorio.github.io/Gui-DS-Learning/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://guiosorio.github.io/Gui-DS-Learning/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://guiosorio.github.io/Gui-DS-Learning/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://guiosorio.github.io/Gui-DS-Learning/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}